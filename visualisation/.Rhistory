#  speaker place of origin)
fit2 <- fa(rawDataToFactor2[,-1], nfactors=3, rotate="oblimin")
# The loadings, which replicate Table 4
#  from Alhazmi (2023)
fit2$loadings
rawDataToFactor2$DynamismStatus =
(rawDataToFactor2$easy_to_understand +
rawDataToFactor2$prestigious +
rawDataToFactor2$open_minded +
rawDataToFactor2$confidant +
rawDataToFactor2$beautiful) /5
rawDataToFactor2$DynamismLang =
(rawDataToFactor2$easy_to_understand +
rawDataToFactor2$difficult_to_understand +
rawDataToFactor2$harsh +
rawDataToFactor2$uncultured)/4
rawDataToFactor2$Solidarity =
(rawDataToFactor2$generous +
rawDataToFactor2$moralistic +
rawDataToFactor2$friendly +
rawDataToFactor2$calm) /4
DynamismStatusMeans = tapply(rawDataToFactor2$DynamismStatus, rawDataToFactor2$Speaker_place_of_origin, mean)
DynamismLangMeans = tapply(rawDataToFactor2$DynamismLang, rawDataToFactor2$Speaker_place_of_origin, mean)
SolidarityMeans = tapply(rawDataToFactor2$Solidarity, rawDataToFactor2$Speaker_place_of_origin, mean)
cbind(DynamismStatusMeans,DynamismLangMeans, SolidarityMeans)
speakerMeans = cbind(DynamismStatusMeans,DynamismLangMeans, SolidarityMeans)
rownames(speakerMeans) = c("Northern","Southern","Najdi","Eastern")
speakerMeans = speakerMeans[,c("Southern","Northern","Eastern","Najdi")]
speakerMeans = cbind(DynamismStatusMeans,DynamismLangMeans, SolidarityMeans)
rownames(speakerMeans) = c("Northern","Southern","Najdi","Eastern")
speakerMeans = speakerMeans[c("Southern","Northern","Eastern","Najdi"),]
speakerMeans
# Table 5
round(speakerMeans,2)
speakerMeans = cbind(DynamismStatusMeans,DynamismLangMeans, SolidarityMeans)
rownames(speakerMeans) = c("Northern","Southern","Najdi","Eastern")
speakerMeans = speakerMeans[c("Southern","Northern","Eastern","Najdi"),]
# Table 5 (doesn't include standard deviations)
round(speakerMeans,2)
# There's an alternative way to do this, using the
# full factor rotation rather than the raw ratings
rawDataToFactor2[,c("MR1","MR2","MR3")] = fit2$scores
# Mean scores for each speaker
MR1Means = tapply(rawDataToFactor2$MR1, rawDataToFactor2$Speaker_place_of_origin, mean)
MR2Means = tapply(rawDataToFactor2$MR2, rawDataToFactor2$Speaker_place_of_origin, mean)
MR3Means = tapply(rawDataToFactor2$MR3, rawDataToFactor2$Speaker_place_of_origin, mean)
speakerMeans2 = cbind(MR1Means,MR2Means, MR3Means)
rownames(speakerMeans2) = c("Northern","Southern","Najdi","Eastern")
speakerMeans2 = speakerMeans2[c("Southern","Northern","Eastern","Najdi"),]
speakerMeans
speakerMeans2
(speakerMeans2+min(speakerMeans2))+5
(speakerMeans2+min(speakerMeans2))+3.9
speakerMeans
(speakerMeans2+min(speakerMeans2))*3.9
(speakerMeans2+abs(min(speakerMeans2)))*3.9
(speakerMeans2+abs(min(speakerMeans2)))*5
speakerMeans
speakerMeans2*3.9
(speakerMeans2+min(speakerMeans2))+3.9
cor(speakerMeans,speakerMeans2)
cor(as.vector(speakerMeans),as.vector(speakerMeans2))
cor(as.vector(speakerMeans),as.vector((speakerMeans2+min(speakerMeans2))+3.9))
?fit <- fa(rawDataToFactor, nfactors=3, rotate="oblimin")
?fa
install.packages("entity")
if (!require("pacman")) install.packages("pacman")
pacman::p_load_gh("trinker/entity")
pacman::p_load_gh("trinker/entity")
library(entity)
install.packages("entity")
install.packages("entityasdasd")
install.packages("tidygeocoder")
library(tidygeocoder)
tidygeocoder::geocode("Gaza Strip")
?geocode
tidygeocoder::geocode(data.frame(location="Gaza Strip"))
sample_addresses
head(sample_addresses)
head(louisville)
geo(address="Gaza Strip")
install.packages("utf8")
install.packages("utf8")
library(tidygeocoder)
library(utf8)
geo(address="Gaza Strip")
?geo
geo(address="Gaza Strip", full_results = T)
result = geo(address="Gaza Strip", full_results = T)
result
names(result)
result[1,]
View(result)
result = geocode(address="Gaza Strip", full_results = T)
tibble(address="Gaza Strip")
tidygeocoder::geocode(data.frame(address="Gaza Strip"))
library(dplyr, warn.conflicts = FALSE)
head(sample_addresses)
tidygeocoder::geocode(data.frame(name="Gaza Strip"))
tidygeocoder::geocode(data.frame(addr="Gaza Strip"))
geocode(sample_addresses[1,])
sample_addresses %>% slice(1:2)
geocode(sample_addresses %>% slice(1:2),address = addr)
tidygeocoder::geocode(data.frame(address="Gaza Strip"),address=address)
getCountryFromGeoResults = function(r){
sapply(r, function(x) {
# Simplify
x_reduc <- x$results[[1]]$address_component
# Loop for 'country' component
for (i in seq_len(length(x_reduc[[1]]))) {
component_type <- x_reduc[[i]]$types[[1]]
if (component_type == 'country') return(x_reduc[[i]]$long_name)
}
})
}
geocodes = geo(data.frame(address="Gaza Strip"),address=address)
tidygeocoder::geocode(data.frame(address="Gaza Strip"),address=address)
geocode(data.frame(address="Gaza Strip"),address=address)
geocodes = geo(locations,address=address,full_results = T)
locations = data.frame(address="Gaza Strip")
geocodes = geo(locations,address=address,full_results = T)
getCountryFromGeoResults(geocodes)
geocodes = geo(locations,address=address,full_results = T)
locations = data.frame(address="Gaza Strip")
geocodes = geo(locations,address=address,full_results = T)
geocodes = geo(data.frame(address="Gaza Strip"),address=address,full_results = T)
geocodes = tidygeocoder::geo(data.frame(address="Gaza Strip"),address=address,full_results = T)
geocodes = geo(locations,address=address,full_results = T)
tidygeocoder::geocode(data.frame(address="Gaza Strip"),address=address)
geocodes = geo(address=locations$address,full_results = T)
tidygeocoder::
geocodes
getCountryFromGeoResults(geocodes)
geocodes = tidygeocoder::geocode(data.frame(address="Gaza Strip"),address=address)
getCountryFromGeoResults(geocodes)
geocodes = geo(address=locations$address,full_results = T)
geocodes$address
View(geocodes)
geocodes = tidygeocoder::geocode(data.frame(address="Gaza Strip"),
address=address,output="more")
geocodes = tidygeocoder::geocode(data.frame(address="Gaza Strip"),
address=address,full_results=T)
view(geocodes)
View(geocodes)
ggmap::geocode("Gaza Strip")
??mutate_geocode
install.packages("revgeo")
library(revgeo)
geocodes = geo(address=locations$address,full_results = T)
geocodes = geo(address=locations$address)
geocodes
geocodes = geo(address=locations$address)
moreInfo = revgeo(geocodes$lat,geocodes$long)
moreInfo
?revgeo
moreInfo = revgeo(geocodes$long,geocodes$lat)
moreInfo
geocodes$long
geocodes$lat
locations = data.frame(address="Cardiff")
geocodes = geo(address=locations$address)
moreInfo = revgeo(geocodes$long,geocodes$lat)
moreInfo
?moreInfo
?revgeo
moreInfo = revgeo(geocodes$long,geocodes$lat,item = 'country')
moreInfo
moreInfo = revgeo(geocodes$long,geocodes$lat,output = 'hash',item = 'country')
moreInfo
geocodes
coords2country = function(points)
{
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
# use 'over' to get indices of the Polygons object containing each point
indices = over(pointsSP, countriesSP)
# return the ADMIN names of each country
indices$ADMIN
#indices$ISO3 # returns the ISO3 code
#indices$continent   # returns the continent (6 continent model)
#indices$REGION   # returns the continent (7 continent model)
}
moreInfo = coords2country(geocodes$long,geocodes$lat)
coords2country = function(points){
# The single argument to this function, points, is a data.frame in which:
#   - column 1 contains the longitude in degrees
#   - column 2 contains the latitude in degrees
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
# use 'over' to get indices of the Polygons object containing each point
indices = over(pointsSP, countriesSP)
# return the ADMIN names of each country
indices$ADMIN
#indices$ISO3 # returns the ISO3 code
#indices$continent   # returns the continent (6 continent model)
#indices$REGION   # returns the continent (7 continent model)
}
moreInfo = coords2country(geocodes$long,geocodes$lat)
moreInfo = coords2country(geocodes[,c("long","lat")])
??getMap
library(sp)
moreInfo = coords2country(geocodes[,c("long","lat")])
library(maps)
library(rgeos)
library(maptools)
moreInfo = coords2country(geocodes[,c("long","lat")])
library(rworldmap)
moreInfo = coords2country(geocodes[,c("long","lat")])
moreInfo
locations = data.frame(address="Gaza Strip")
geocodes = geo(address=locations$address)
moreInfo = coords2country(geocodes[,c("long","lat")])
moreInfo
locations = data.frame(address=c("Gaza Strip","Cardiff"))
geocodes = geo(address=locations$address)
moreInfo = coords2country(geocodes[,c("long","lat")])
moreInfo
coords2country = function(points){
# The single argument to this function, points, is a data.frame in which:
#   - column 1 contains the longitude in degrees
#   - column 2 contains the latitude in degrees
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
# use 'over' to get indices of the Polygons object containing each point
indices = over(pointsSP, countriesSP)
# return the ADMIN names of each country
as.character(indices$ADMIN)
}
countries = coords2country(geocodes[,c("long","lat")])
countries
geocodes$countries = coords2country(geocodes[,c("long","lat")])
geocodes
library(entity)
library(tidygeocoder)
library(utf8)
library(sp)
library(tidygeocoder)
library(utf8)
library(sp)
library(rworldmap)
coords2country = function(points){
# The single argument to this function, points, is a data.frame in which:
#   - column 1 contains the longitude in degrees
#   - column 2 contains the latitude in degrees
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
# use 'over' to get indices of the Polygons object containing each point
indices = over(pointsSP, countriesSP)
# return the ADMIN names of each country
as.character(indices$ADMIN)
}
tweet = "Today there was an event in the Gaza Strip."
locations = location_entity(tweet)
locations = location_entity(tweet)
locations
tweet = "Today there was an event in Cardiff."
locations = location_entity(tweet)
locations
?location_entity
locations
tweet = c("Today there was an event in Cardiff.",
"Celebrations in Saudi today.")
locations = location_entity(tweet)
locations
tweet = c("Today there was an event in Cardiff and Swansey.",
"Celebrations in Saudi today.")
locations = location_entity(tweet)
locations
tweet = c("Today there was an event in Cardiff and also in London.",
"Celebrations in Saudi today.")
locations = location_entity(tweet)
locations
tweet = c("Today there was an event in Cardiff, and also in London.",
"Celebrations in Saudi today.")
locations = location_entity(tweet)
locations
geocodes = geo(address=locations)
geocodes = geo(address=unlist(locations))
geocodes
coords2country = function(points){
# The single argument to this function, points, is a data.frame in which:
#   - column 1 contains the longitude in degrees
#   - column 2 contains the latitude in degrees
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
# use 'over' to get indices of the Polygons object containing each point
indices = over(pointsSP, countriesSP)
# return the ADMIN names of each country
as.character(indices$ADMIN)
}
geocodes$countries = coords2country(geocodes[,c("long","lat")])
geocodes
locations
geocodes$country = coords2country(geocodes[,c("long","lat")])
sapply(locations,function(l){
geocodes[match(l,geocodes$address),]$country
})
?location_annotator()
locations = location_annotator(tweet)
locations = location_annotator()
location_annotator()
?location_entity
?binom.test()
binom.test(c(116,33))
library(osmdata)
install.packages("osmdata")
install.packages("libproj")
remotes::install_github("paleolimbot/libproj")
install.packages("osmdata")
install.packages("proj4")
library("libproj")
library(ggmap)
?ggmap::get_stadiamap()
register_stadiamaps("60aecad7-2254-4fcd-86a8-f07c435737a8", write = T)
#cm <- get_map(bb,source = "osm")
cm = get_stadiamap(us, zoom = 5, maptype = "alidade_smooth")
#cm <- get_map(bb,source = "osm")
cm = get_stadiamap(bb, zoom = 5, maptype = "alidade_smooth")
library(tidyverse)
library(ggmap)
library(osmdata)
library(ggplot2)
library(grid)
setwd("~/OneDrive - Cardiff University/Funding/InternationalStrategicFund/project/visualisation/")
d = read.csv("../data/langaugeLocation.csv",stringsAsFactors = F,quote="")
d$source = factor(d$source,levels=c("S","DND"))
d = d[rev(order(d$source,d$lat,d$long)),]
d$label = paste0(1:nrow(d),". ",d$language)
d$label.lat = d$lat
d$label.long = d$long
#d[d$language=="Alike",]$label.lat = d[d$language=="Alike",]$label.lat-1
#d[d$language=="Old Tibetan",]$label.lat = d[d$language=="Old Tibetan",]$label.lat+0.5
d[d$source=="DND",]$label.long = d[d$source=="DND",]$label.long-0.05
d[d$source=="S",]$label.long = d[d$source=="S",]$label.long-0.8
d[d$language=="Batang",]$label.long = d[d$language=="Batang",]$label.long +3.8
d[d$language=="Batang",]$label.lat = d[d$language=="Batang",]$label.lat -2
#d[d$language=="Lhasa",]$label.lat = d[d$language=="Lhasa",]$label.lat
d[d$language=="Old Tibetan",]$label.lat = d[d$language=="Old Tibetan",]$label.lat +2
d[d$language=="Lhasa",]$label.long = d[d$language=="Lhasa",]$label.long -1
d[d$language=="Old Tibetan",]$label.long = d[d$language=="Old Tibetan",]$label.long +3.5
#d[d$language=="Lhasa",]$label.lat = d[d$language=="Lhasa",]$label.lat -3
d$hjust = "right"
#d[d$language=="Lhasa",]$hjust = "bottom"
#d[d$language=="Batang",]$hjust = "bottom"
#d = d[d$source=="DND",]
#bb = getbb("Nepal")
#79.88,25.48,89.42,30.56
#bb["y","max"]= 34.7
#bb["y","min"]= 25.48
#bb["x","max"]= 101
#bb["x","min"]= 82
bb = matrix(c(83,27,88,29.2), ncol=2)
rownames(bb) = c("x","y")
colnames(bb) = c("min","max")
#cm <- get_map(bb,source = "osm")
cm = get_stadiamap(bb, zoom = 5, maptype = "alidade_smooth")
cm
plot(cm)
cmap = ggmap(cm) + geom_point(aes(x=long,y=lat),data=d[d$source=="DND",]) +
geom_label(aes(x=label.long,y=label.lat,label=label,hjust="right"),data=d[d$source=="DND",])+
theme(axis.title = element_blank())
cmap
#cm <- get_map(bb,source = "osm")
cm = get_stadiamap(bb, zoom = 10, maptype = "alidade_smooth")
#cm <- get_map(bb,source = "osm")
cm = get_stadiamap(bb, zoom = 8, maptype = "alidade_smooth")
cmap = ggmap(cm) + geom_point(aes(x=long,y=lat),data=d[d$source=="DND",]) +
geom_label(aes(x=label.long,y=label.lat,label=label,hjust="right"),data=d[d$source=="DND",])+
theme(axis.title = element_blank())
cmap
#cm <- get_map(bb,source = "osm")
cm = get_stadiamap(bb, zoom = 7, maptype = "alidade_smooth")
cmap = ggmap(cm) + geom_point(aes(x=long,y=lat),data=d[d$source=="DND",]) +
geom_label(aes(x=label.long,y=label.lat,label=label,hjust="right"),data=d[d$source=="DND",])+
theme(axis.title = element_blank())
cmap
?get_stadiamap
STADIA_VALID_MAP_TYPES
#cm <- get_map(bb,source = "osm")
cm = get_stadiamap(bb, zoom = 7, maptype = "stamen_terrain")
cmap = ggmap(cm) + geom_point(aes(x=long,y=lat),data=d[d$source=="DND",]) +
geom_label(aes(x=label.long,y=label.lat,label=label,hjust="right"),data=d[d$source=="DND",])+
theme(axis.title = element_blank())
cmap
#cm <- get_map(bb,source = "osm")
cm = get_stadiamap(bb, zoom = 8, maptype = "stamen_terrain")
cmap = ggmap(cm) + geom_point(aes(x=long,y=lat),data=d[d$source=="DND",]) +
geom_label(aes(x=label.long,y=label.lat,label=label,hjust="right"),data=d[d$source=="DND",])+
theme(axis.title = element_blank())
cmap
#cm <- get_map(bb,source = "osm")
cm = get_stadiamap(bb, zoom = 8, maptype = "stamen_terrain")
library(tidyverse)
library(ggmap)
library(osmdata)
library(ggplot2)
library(grid)
setwd("~/OneDrive - Cardiff University/Funding/InternationalStrategicFund/project/visualisation/")
d = read.csv("../data/langaugeLocation.csv",stringsAsFactors = F,quote="")
d$source = factor(d$source,levels=c("S","DND"))
d = d[rev(order(d$source,d$lat,d$long)),]
d$label = paste0(1:nrow(d),". ",d$language)
d$label.lat = d$lat
d$label.long = d$long
#d[d$language=="Alike",]$label.lat = d[d$language=="Alike",]$label.lat-1
#d[d$language=="Old Tibetan",]$label.lat = d[d$language=="Old Tibetan",]$label.lat+0.5
d[d$source=="DND",]$label.long = d[d$source=="DND",]$label.long-0.05
d[d$source=="S",]$label.long = d[d$source=="S",]$label.long-0.8
d[d$language=="Batang",]$label.long = d[d$language=="Batang",]$label.long +3.8
d[d$language=="Batang",]$label.lat = d[d$language=="Batang",]$label.lat -2
#d[d$language=="Lhasa",]$label.lat = d[d$language=="Lhasa",]$label.lat
d[d$language=="Old Tibetan",]$label.lat = d[d$language=="Old Tibetan",]$label.lat +2
d[d$language=="Lhasa",]$label.long = d[d$language=="Lhasa",]$label.long -1
d[d$language=="Old Tibetan",]$label.long = d[d$language=="Old Tibetan",]$label.long +3.5
#d[d$language=="Lhasa",]$label.lat = d[d$language=="Lhasa",]$label.lat -3
d$hjust = "right"
#d[d$language=="Lhasa",]$hjust = "bottom"
#d[d$language=="Batang",]$hjust = "bottom"
#d = d[d$source=="DND",]
#bb = getbb("Nepal")
#79.88,25.48,89.42,30.56
#bb["y","max"]= 34.7
#bb["y","min"]= 25.48
#bb["x","max"]= 101
#bb["x","min"]= 82
bb = matrix(c(83,27,88,29.2), ncol=2)
rownames(bb) = c("x","y")
colnames(bb) = c("min","max")
#cm <- get_map(bb,source = "osm")
cm = get_stadiamap(bb, zoom = 8, maptype = "stamen_terrain")
bb2 = matrix(c(80,23,103,39), ncol=2)
rownames(bb2) = c("x","y")
colnames(bb2) = c("min","max")
#cm2 <- get_map(bb2,source = "osm")
cm = get_stadiamap(bb2, zoom = 7, maptype = "stamen_terrain")
cmap = ggmap(cm) + geom_point(aes(x=long,y=lat),data=d[d$source=="DND",]) +
geom_label(aes(x=label.long,y=label.lat,label=label,hjust="right"),data=d[d$source=="DND",])+
theme(axis.title = element_blank())
cmap
cmap2 = ggmap(cm2) + geom_point(aes(x=long,y=lat,colour="red"),data=d[d$source=="S",]) +
geom_point(aes(x=long,y=lat),data=d[d$source=="DND",]) +
geom_label(aes(x=label.long,y=label.lat,label=label,hjust=hjust),
data=d[d$source=="S",]) +
theme(axis.title = element_blank(),legend.position = "none")
cmap + inset(ggplotGrob(cmap2),
xmin = 85.7, xmax = 88,
ymin = 27.86, ymax = 29.2)
#cm2 <- get_map(bb2,source = "osm")
cm = get_stadiamap(bb2, zoom = 6, maptype = "stamen_terrain")
cmap = ggmap(cm) + geom_point(aes(x=long,y=lat),data=d[d$source=="DND",]) +
geom_label(aes(x=label.long,y=label.lat,label=label,hjust="right"),data=d[d$source=="DND",])+
theme(axis.title = element_blank())
#cm <- get_map(bb,source = "osm")
cm = get_stadiamap(bb, zoom = 8, maptype = "stamen_terrain")
bb2 = matrix(c(80,23,103,39), ncol=2)
rownames(bb2) = c("x","y")
colnames(bb2) = c("min","max")
#cm2 <- get_map(bb2,source = "osm")
cm2 = get_stadiamap(bb2, zoom = 7, maptype = "stamen_terrain")
#cm2 <- get_map(bb2,source = "osm")
cm2 = get_stadiamap(bb2, zoom = 6, maptype = "stamen_terrain")
cmap = ggmap(cm) + geom_point(aes(x=long,y=lat),data=d[d$source=="DND",]) +
geom_label(aes(x=label.long,y=label.lat,label=label,hjust="right"),data=d[d$source=="DND",])+
theme(axis.title = element_blank())
cmap
cmap2 = ggmap(cm2) + geom_point(aes(x=long,y=lat,colour="red"),data=d[d$source=="S",]) +
geom_point(aes(x=long,y=lat),data=d[d$source=="DND",]) +
geom_label(aes(x=label.long,y=label.lat,label=label,hjust=hjust),
data=d[d$source=="S",]) +
theme(axis.title = element_blank(),legend.position = "none")
cmap + inset(ggplotGrob(cmap2),
xmin = 85.7, xmax = 88,
ymin = 27.86, ymax = 29.2)
pdf("LanguagesMap.pdf")
cmap + inset(ggplotGrob(cmap2),
xmin = 85.7, xmax = 88,
ymin = 27.86, ymax = 29.2)
dev.off()
dev.off()
pdf("LanguagesMap.pdf",width=12,height=10)
cmap + inset(ggplotGrob(cmap2),
xmin = 85.7, xmax = 88,
ymin = 27.86, ymax = 29.2)
dev.off()
pdf("LanguagesMap.pdf",width=8,height=6)
cmap + inset(ggplotGrob(cmap2),
xmin = 85.7, xmax = 88,
ymin = 27.86, ymax = 29.2)
dev.off()
#cm <- get_map(bb,source = "osm")
cm = get_stadiamap(bb, zoom = 9, maptype = "stamen_terrain")
cmap = ggmap(cm) + geom_point(aes(x=long,y=lat),data=d[d$source=="DND",]) +
geom_label(aes(x=label.long,y=label.lat,label=label,hjust="right"),data=d[d$source=="DND",])+
theme(axis.title = element_blank())
cmap + inset(ggplotGrob(cmap2),
xmin = 85.7, xmax = 88,
ymin = 27.86, ymax = 29.2)
pdf("LanguagesMap.pdf",width=8,height=6)
cmap + inset(ggplotGrob(cmap2),
xmin = 85.7, xmax = 88,
ymin = 27.86, ymax = 29.2)
dev.off()
#cm <- get_map(bb,source = "osm")
cm = get_stadiamap(bb, zoom = 8, maptype = "stamen_terrain")
cmap = ggmap(cm) + geom_point(aes(x=long,y=lat),data=d[d$source=="DND",]) +
geom_label(aes(x=label.long,y=label.lat,label=label,hjust="right"),data=d[d$source=="DND",])+
theme(axis.title = element_blank())
pdf("LanguagesMap.pdf",width=8,height=6)
cmap + inset(ggplotGrob(cmap2),
xmin = 85.7, xmax = 88,
ymin = 27.86, ymax = 29.2)
dev.off()
