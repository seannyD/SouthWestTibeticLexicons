dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
dx
dx$COGIDS
strsplit(dx$COGIDS," ")
?outer
outer(strsplit(dx$COGIDS," "),FUN = function(x,y){length(x)+length(y)})
outer(strsplit(dx$COGIDS," "),strsplit(dx$COGIDS," "),FUN = function(x,y){length(x)+length(y)})
outer(strsplit(dx$COGIDS," "),strsplit(dx$COGIDS," "),FUN = function(x,y){1})
outer(strsplit(dx$COGIDS," "),strsplit(dx$COGIDS," "),FUN = function(x,y){length(x)})
outer(strsplit(dx$COGIDS," "),strsplit(dx$COGIDS," "),FUN = function(x,y){print(length(x))})
outer(strsplit(dx$COGIDS," "),strsplit(dx$COGIDS," "),FUN = function(x,y){print(length(y))})
dist(strsplit(dx$COGIDS," "))
dx[i,]
# Make sure there's only one item per cog/doculect
subcogs = strsplit(dx$COGIDS)
# Make sure there's only one item per cog/doculect
subcogs = strsplit(dx$COGIDS," ")
subcogs
subcogs[[i]]
i = 1
j= 2
subcogs[[i]]
intersect(subcogs[[i]],subcogs[[j]])
length(intersect(subcogs[[i]],subcogs[[j]]))/max(c(length(subcogs[[i]]),length(subcogs[[j]])))
dx = d[d$CONCEPT==concept,]
# Make sure there's only one item per cog/doculect
subcogs = strsplit(dx$COGIDS," ")
mx = matrix(nrow=length(subcogs),ncol=length(subcogs))
for(i in 1:length(subcogs)){
for(j in 1:length(subcogs)){
mx[i,j] = length(intersect(subcogs[[i]],subcogs[[j]]))/max(c(length(subcogs[[i]]),length(subcogs[[j]])))
}
}
m
mx
1/1
# Make sure there's only one item per cog/doculect
subcogs = strsplit(dx$COGIDS," ")
mx = matrix(nrow=length(subcogs),ncol=length(subcogs))
for(i in 1:length(subcogs)){
for(j in 1:length(subcogs)){
mx[i,j] = 1-(length(intersect(subcogs[[i]],subcogs[[j]]))/max(c(length(subcogs[[i]]),length(subcogs[[j]]))))
}
}
dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
dists2 = sapply(unique(d$CONCEPT), function(concept){
dx = d[d$CONCEPT==concept,]
# Make sure there's only one item per cog/doculect
dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
# Split into subcogs
subcogs = strsplit(dx$COGIDS," ")
mx = matrix(nrow=length(subcogs),ncol=length(subcogs))
for(i in 1:length(subcogs)){
for(j in 1:length(subcogs)){
mx[i,j] = 1-(length(intersect(subcogs[[i]],subcogs[[j]]))/max(c(length(subcogs[[i]]),length(subcogs[[j]]))))
}
}
distX = mx/max(mx)
},simplify = F)
dists2 = Reduce("+", dists2)
dists2
length(unique(d$DOCULECT))
concept = "Corpse"
dx = d[d$CONCEPT==concept,]
# Make sure there's only one item per cog/doculect
dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
# Split into subcogs
subcogs = strsplit(dx$COGIDS," ")
subcogs
dx
tapply(dx$COGIDS,dx$DOCULECT,function(X){unique(unlist(strsplit(X," ")))})
dists2 = sapply(unique(d$CONCEPT), function(concept){
dx = d[d$CONCEPT==concept,]
# Make sure there's only one item per cog/doculect
dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
# Split into subcogs by doculect
#subcogs = strsplit(dx$COGIDS," ")
subcogs = tapply(dx$COGIDS,dx$DOCULECT,function(X){unique(unlist(strsplit(X," ")))})
mx = matrix(nrow=length(subcogs),ncol=length(subcogs))
for(i in 1:length(subcogs)){
for(j in 1:length(subcogs)){
mx[i,j] = 1-(length(intersect(subcogs[[i]],subcogs[[j]]))/max(c(length(subcogs[[i]]),length(subcogs[[j]]))))
}
}
distX = mx/max(mx)
},simplify = F)
dists2 = Reduce("+", dists2)
dists2
dists2 = sapply(unique(d$CONCEPT), function(concept){
dx = d[d$CONCEPT==concept,]
# Make sure there's only one item per cog/doculect
dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
# Split into subcogs by doculect
#subcogs = strsplit(dx$COGIDS," ")
subcogs = tapply(dx$COGIDS,dx$DOCULECT,function(X){unique(unlist(strsplit(X," ")))})
mx = matrix(nrow=length(subcogs),ncol=length(subcogs))
for(i in 1:length(subcogs)){
for(j in 1:length(subcogs)){
mx[i,j] = 1-(length(intersect(subcogs[[i]],subcogs[[j]]))/max(c(length(subcogs[[i]]),length(subcogs[[j]]))))
}
}
distX = mx/max(mx)
},simplify = F)
dists2[[1]]
dists2[[2]]
dists2
concept = "Intestine"
dx = d[d$CONCEPT==concept,]
# Make sure there's only one item per cog/doculect
dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
dx
# Split into subcogs by doculect
#subcogs = strsplit(dx$COGIDS," ")
subcogs = tapply(dx$COGIDS,dx$DOCULECT,function(X){unique(unlist(strsplit(X," ")))})
subcogs
mx = matrix(nrow=length(subcogs),ncol=length(subcogs))
for(i in 1:length(subcogs)){
for(j in 1:length(subcogs)){
mx[i,j] = 1-(length(intersect(subcogs[[i]],subcogs[[j]]))/max(c(length(subcogs[[i]]),length(subcogs[[j]]))))
}
}
,x
mx
dists2 = sapply(unique(d$CONCEPT), function(concept){
dx = d[d$CONCEPT==concept,]
# Make sure there's only one item per cog/doculect
dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
# Split into subcogs by doculect
#subcogs = strsplit(dx$COGIDS," ")
subcogs = tapply(dx$COGIDS,dx$DOCULECT,function(X){unique(unlist(strsplit(X," ")))})
mx = matrix(nrow=length(subcogs),ncol=length(subcogs))
for(i in 1:length(subcogs)){
for(j in 1:length(subcogs)){
mx[i,j] = 1-(length(intersect(subcogs[[i]],subcogs[[j]]))/max(c(length(subcogs[[i]]),length(subcogs[[j]]))))
}
}
if(sum(mx)>0){
distX = mx/max(mx)
}
},simplify = F)
dists2 = Reduce("+", dists2)
dists2
dists2 = sapply(unique(d$CONCEPT), function(concept){
dx = d[d$CONCEPT==concept,]
# Make sure there's only one item per cog/doculect
dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
# Split into subcogs by doculect
#subcogs = strsplit(dx$COGIDS," ")
subcogs = tapply(dx$COGIDS,dx$DOCULECT,function(X){unique(unlist(strsplit(X," ")))})
mx = matrix(nrow=length(subcogs),ncol=length(subcogs))
for(i in 1:length(subcogs)){
for(j in 1:length(subcogs)){
mx[i,j] = 1-(length(intersect(subcogs[[i]],subcogs[[j]]))/max(c(length(subcogs[[i]]),length(subcogs[[j]]))))
}
}
if(sum(mx)>0){
distX = mx/max(mx)
}
},simplify = F)
dists2
Reduce("+", dists2)
dists2 = sapply(unique(d$CONCEPT), function(concept){
dx = d[d$CONCEPT==concept,]
# Make sure there's only one item per cog/doculect
dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
# Split into subcogs by doculect
#subcogs = strsplit(dx$COGIDS," ")
subcogs = tapply(dx$COGIDS,dx$DOCULECT,function(X){unique(unlist(strsplit(X," ")))})
mx = matrix(nrow=length(subcogs),ncol=length(subcogs))
for(i in 1:length(subcogs)){
for(j in 1:length(subcogs)){
mx[i,j] = 1-(length(intersect(subcogs[[i]],subcogs[[j]]))/max(c(length(subcogs[[i]]),length(subcogs[[j]]))))
}
}
distX = mx
if(sum(mx)>0){
distX = mx/max(mx)
}
},simplify = F)
dists2 = Reduce("+", dists2)
dists2
dists2
dists2 = sapply(unique(d$CONCEPT), function(concept){
dx = d[d$CONCEPT==concept,]
# Make sure there's only one item per cog/doculect
dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
# Split into subcogs by doculect
#subcogs = strsplit(dx$COGIDS," ")
subcogs = tapply(dx$COGIDS,dx$DOCULECT,function(X){unique(unlist(strsplit(X," ")))})
mx = matrix(nrow=length(subcogs),ncol=length(subcogs))
for(i in 1:length(subcogs)){
for(j in 1:length(subcogs)){
mx[i,j] = 1-(length(intersect(subcogs[[i]],subcogs[[j]]))/max(c(length(subcogs[[i]]),length(subcogs[[j]]))))
}
}
distX = mx
if(sum(mx)>0){
distX = mx/max(mx)
}
},simplify = F)
dists2
dists2 = sapply(unique(d$CONCEPT), function(concept){
dx = d[d$CONCEPT==concept,]
# Make sure there's only one item per cog/doculect
dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
# Split into subcogs by doculect
#subcogs = strsplit(dx$COGIDS," ")
subcogs = tapply(dx$COGIDS,dx$DOCULECT,function(X){unique(unlist(strsplit(X," ")))})
mx = matrix(nrow=length(subcogs),ncol=length(subcogs))
for(i in 1:length(subcogs)){
for(j in 1:length(subcogs)){
mx[i,j] = 1-(length(intersect(subcogs[[i]],subcogs[[j]]))/max(c(length(subcogs[[i]]),length(subcogs[[j]]))))
}
}
if(sum(mx)>0){
mx = mx/max(mx)
}
return(mx)
},simplify = F)
dists2 = Reduce("+", dists2)
dists2
subcogs
names(subcogs)
dists2 = sapply(unique(d$CONCEPT), function(concept){
dx = d[d$CONCEPT==concept,]
# Make sure there's only one item per cog/doculect
dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
# Split into subcogs by doculect
#subcogs = strsplit(dx$COGIDS," ")
subcogs = tapply(dx$COGIDS,dx$DOCULECT,function(X){unique(unlist(strsplit(X," ")))})
mx = matrix(nrow=length(subcogs),ncol=length(subcogs))
rownames(mx) = names(subcogs)
colnames(mx) = names(subcogs)
for(i in 1:length(subcogs)){
for(j in 1:length(subcogs)){
mx[i,j] = 1-(length(intersect(subcogs[[i]],subcogs[[j]]))/max(c(length(subcogs[[i]]),length(subcogs[[j]]))))
}
}
if(sum(mx)>0){
mx = mx/max(mx)
}
return(mx)
},simplify = F)
dists2 = Reduce("+", dists2)
dists2
nnet2 <- neighborNet(dists2)
plot(nnet2)
nnet2 <- neighborNet(dists2)
pdf("../results/distances/JML_NeighbourNet_Morpheme.pdf",width=8,height=8)
plot(nnet2)
dev.off()
dx = d[!duplicated(d[,c("COGID","DOCULECT")]),]
dist2 = dist(table(dx$DOCULECT,dx$COGID))
nnet2 <- neighborNet(dist2)
plot(nnet2)
pdf("../results/distances/JML_NeighbourNet_nonWeighted.pdf",width=8,height=8)
plot(nnet2)
dev.off()
dx = d[d$CONCEPT==concept,]
# Make sure there's only one item per cog/doculect
dx = dx[!duplicated(dx[,c("COGID","DOCULECT")]),]
tx = table(dx$COGID,dx$DOCULECT)
tx
apply(tx,1,dist,simplify = F)
?dist
length(unique(d$CONCEPT))
old = read.csv("../data/corrected/AllLangs_240_CogID_Sagart_Complete_Extended_Checked4.tsv",sep="\t",fileEncoding = "UTF-8",encoding = "UTF-8",comment.char = "#")
old = old[old$DOCULECT %in% c("S_Old_Chinese", "S_Old_Tibetan"),]
old$CONCEPT = str_to_sentence(old$CONCEPT)
oc = unique(old$CONCEPT)
x = oc[! oc %in% allConcepts]
length(x)
conChanges = read.csv("../data/JML_Cognate_Coding/ConceptMapping.csv",stringsAsFactors = F)
conChanges = conChanges[conChanges$Orig!="",]
for(i in 1:nrow(conChanges)){
targ = conChanges$JML[i]
repl = conChanges$Orig[i]
if(targ %in% old$CONCEPT){
old[old$CONCEPT==targ,]$CONCEPT = repl
}
}
oc = unique(old$CONCEPT)
x = oc[! oc %in% allConcepts]
length(x)
head(old)
length(unique(old$DOCULECT))
old = read.csv("../data/corrected/AllLangs_240_CogID_Sagart_Complete_Extended_Checked4.tsv",sep="\t",fileEncoding = "UTF-8",encoding = "UTF-8",comment.char = "#")
oldFull = old
rm(list=ls())
library(phangorn)
library(stringr)
try(setwd("~/OneDrive - Cardiff University/Funding/InternationalStrategicFund/project/visualisation/"))
d = read.csv("../data/JML_Cognate_Coding/dhakalsouthwesttibetic 2/dhakalsouthwesttibetic.tsv",
sep="\t",fileEncoding = "UTF-8",encoding = "UTF-8",comment.char = "#")
d = d[d$NOTE!="[ignore]",]
d = d[d$NOTE!="[!] variant, can be excluded",]
length(unique(d$CONCEPT))
allConcepts = unique(d$CONCEPT)
langs = unique(d$DOCULECT)
# Filter concepts that aren't present for all doculects
fullConcepts = tapply(d$DOCULECT,d$CONCEPT,
function(X){length((unique(X)))==length(langs)})
d = d[d$CONCEPT %in% names(fullConcepts)[fullConcepts],]
length(unique(d$CONCEPT))
# Filter concepts with no variation
conceptsWithVar = tapply(d$COGID,d$CONCEPT,
function(X){length(unique(X))>1})
d = d[d$CONCEPT %in% names(conceptsWithVar)[conceptsWithVar],]
length(unique(d$CONCEPT))
finalConcepts = unique(d$CONCEPT)
old = read.csv("../data/corrected/AllLangs_240_CogID_Sagart_Complete_Extended_Checked4.tsv",sep="\t",fileEncoding = "UTF-8",encoding = "UTF-8",comment.char = "#")
old = old[old$DOCULECT %in% c("S_Old_Chinese", "S_Old_Tibetan"),]
old$CONCEPT = str_to_sentence(old$CONCEPT)
oc = unique(old$CONCEPT)
x = oc[! oc %in% allConcepts]
length(x)
conChanges = read.csv("../data/JML_Cognate_Coding/ConceptMapping.csv",stringsAsFactors = F)
conChanges = conChanges[conChanges$Orig!="",]
for(i in 1:nrow(conChanges)){
targ = conChanges$JML[i]
repl = conChanges$Orig[i]
if(targ %in% old$CONCEPT){
old[old$CONCEPT==targ,]$CONCEPT = repl
}
}
oc = unique(old$CONCEPT)
x = oc[! oc %in% allConcepts]
length(x)
#write.csv(data.frame(x=x),file="../data/JML_Cognate_Coding/ConceptMapping.csv", row.names = F)
old = old[old$CONCEPT %in% finalConcepts,]
library(phangorn)
library(stringr)
try(setwd("~/OneDrive - Cardiff University/Funding/InternationalStrategicFund/project/visualisation/"))
d = read.csv("../data/JML_Cognate_Coding/dhakalsouthwesttibetic 2/dhakalsouthwesttibetic.tsv",
sep="\t",fileEncoding = "UTF-8",encoding = "UTF-8",comment.char = "#")
d = d[d$NOTE!="[ignore]",]
d = d[d$NOTE!="[!] variant, can be excluded",]
length(unique(d$CONCEPT))
allConcepts = unique(d$CONCEPT)
langs = unique(d$DOCULECT)
# Filter concepts that aren't present for all doculects
fullConcepts = tapply(d$DOCULECT,d$CONCEPT,
function(X){length((unique(X)))==length(langs)})
d = d[d$CONCEPT %in% names(fullConcepts)[fullConcepts],]
length(unique(d$CONCEPT))
# Filter concepts with no variation
conceptsWithVar = tapply(d$COGID,d$CONCEPT,
function(X){length(unique(X))>1})
d = d[d$CONCEPT %in% names(conceptsWithVar)[conceptsWithVar],]
length(unique(d$CONCEPT))
finalConcepts = unique(d$CONCEPT)
old = read.csv("../data/corrected/AllLangs_240_CogID_Sagart_Complete_Extended_Checked4.tsv",sep="\t",fileEncoding = "UTF-8",encoding = "UTF-8",comment.char = "#")
old = old[old$DOCULECT %in% unique(d$DOCULECT),]
old$CONCEPT = str_to_sentence(old$CONCEPT)
oc = unique(old$CONCEPT)
x = oc[! oc %in% allConcepts]
length(x)
conChanges = read.csv("../data/JML_Cognate_Coding/ConceptMapping.csv",stringsAsFactors = F)
conChanges = conChanges[conChanges$Orig!="",]
for(i in 1:nrow(conChanges)){
targ = conChanges$JML[i]
repl = conChanges$Orig[i]
if(targ %in% old$CONCEPT){
old[old$CONCEPT==targ,]$CONCEPT = repl
}
}
oc = unique(old$CONCEPT)
x = oc[! oc %in% allConcepts]
length(x)
#write.csv(data.frame(x=x),file="../data/JML_Cognate_Coding/ConceptMapping.csv", row.names = F)
old = old[old$CONCEPT %in% finalConcepts,]
head(old)
concept = finalConcepts[1]
concept
dx = d[d$CONCEPT==concept,]
oldx = old[old$CONCEPT==concept,]
intersect(dx$DOCULECT,oldx$DOCULECT)
dx = d[d$CONCEPT==concept,]
oldx = old[old$CONCEPT==concept,]
lx = intersect(dx$DOCULECT,oldx$DOCULECT)
dx = dx[dx$DOCULECT %in% lx,]
oldx = oldx[oldx$DOCULECT %in% lx,]
dx
old
table(dx$COGID,oldx$COGID)
dx
oldx
dx[order(dx$COGID),]
dx = dx[order(dx$COGID),]
dx = dx[order(dx$COGID),]
oldx[match(dx$DOCULECT,oldx$DOCULECT),]
dx = dx[order(dx$COGID),c("DOCULECT","COGID","ALIGNMENT")]
dx = d[d$CONCEPT==concept,]
oldx = old[old$CONCEPT==concept,]
lx = intersect(dx$DOCULECT,oldx$DOCULECT)
dx = dx[dx$DOCULECT %in% lx,]
oldx = oldx[oldx$DOCULECT %in% lx,]
dx = dx[order(dx$COGID),]
dx[,c("DOCULECT","COGID","ALIGNMENT")]
oldx[match(dx$DOCULECT,oldx$DOCULECT),c("DOCULECT","COGID","ALIGNMENT")]
###########
sumDifferent = 0
for(concept in finalConcepts){
dx = d[d$CONCEPT==concept,]
oldx = old[old$CONCEPT==concept,]
lx = intersect(dx$DOCULECT,oldx$DOCULECT)
dx = dx[dx$DOCULECT %in% lx,]
oldx = oldx[oldx$DOCULECT %in% lx,]
dx = dx[order(dx$COGID),]
dx[,c("DOCULECT","COGID","ALIGNMENT")]
oldx[match(dx$DOCULECT,oldx$DOCULECT),c("DOCULECT","COGID","ALIGNMENT")]
if(length(unique(dx$COGID)!=length(unique(oldx$COGID)))){
sumDifferent = sumDifferent + 1
}
}
print(sumDifferent/length(finalConcepts))
concept = finalConcepts[2]
dx = d[d$CONCEPT==concept,]
oldx = old[old$CONCEPT==concept,]
lx = intersect(dx$DOCULECT,oldx$DOCULECT)
dx = dx[dx$DOCULECT %in% lx,]
oldx = oldx[oldx$DOCULECT %in% lx,]
dx = dx[order(dx$COGID),]
dx[,c("DOCULECT","COGID","ALIGNMENT")]
oldx[match(dx$DOCULECT,oldx$DOCULECT),c("DOCULECT","COGID","ALIGNMENT")]
head(oldx)
head(oldx[oldx$COGID>1000,])
head(oldx[as.numeric(oldx$COGID>1000),])
oldx$COGID
head(old[as.numeric(old$COGID>1000),])
head(old[as.numeric(old$COGID)>1000,])
concept
concept = "Above"
dx = d[d$CONCEPT==concept,]
oldx = old[old$CONCEPT==concept,]
lx = intersect(dx$DOCULECT,oldx$DOCULECT)
dx = dx[dx$DOCULECT %in% lx,]
oldx = oldx[oldx$DOCULECT %in% lx,]
dx = dx[order(dx$COGID),]
dx[,c("DOCULECT","COGID","ALIGNMENT")]
oldx[match(dx$DOCULECT,oldx$DOCULECT),c("DOCULECT","COGID","ALIGNMENT")]
length(unique(dx$COGID)!=length(unique(oldx$COGID)))
length(unique(oldx$COGID)))
length(unique(dx$COGID))!=length(unique(oldx$COGID))
table(dx$COGID,oldx[match(dx$DOCULECT,oldx$DOCULECT),]$COGID)
d = read.csv("../data/JML_Cognate_Coding/dhakalsouthwesttibetic 2/dhakalsouthwesttibetic.tsv",
sep="\t",fileEncoding = "UTF-8",encoding = "UTF-8",comment.char = "#")
d = d[d$NOTE!="[ignore]",]
d = d[d$NOTE!="[!] variant, can be excluded",]
length(unique(d$CONCEPT))
allConcepts = unique(d$CONCEPT)
langs = unique(d$DOCULECT)
# Filter concepts that aren't present for all doculects
fullConcepts = tapply(d$DOCULECT,d$CONCEPT,
function(X){length((unique(X)))==length(langs)})
d = d[d$CONCEPT %in% names(fullConcepts)[fullConcepts],]
length(unique(d$CONCEPT))
# Filter concepts with no variation
conceptsWithVar = tapply(d$COGID,d$CONCEPT,
function(X){length(unique(X))>1})
d = d[d$CONCEPT %in% names(conceptsWithVar)[conceptsWithVar],]
length(unique(d$CONCEPT))
finalConcepts = unique(d$CONCEPT)
table(tapply(d$COGID,d$CONCEPT,function(X){length(unique(X))}))
length(unique(paste(d$COGID,d$CONCEPT)))
mean(tapply(d$COGID,d$CONCEPT,function(X){length(unique(X))}))
d = read.csv("../data/JML_Cognate_Coding/dhakalsouthwesttibetic 2/dhakalsouthwesttibetic.tsv",
sep="\t",fileEncoding = "UTF-8",encoding = "UTF-8",comment.char = "#")
length(unique(d$COGID))
length(unique(d$CONCEPT))
d = read.csv("../data/JML_Cognate_Coding/dhakalsouthwesttibetic 2/dhakalsouthwesttibetic.tsv",
sep="\t",fileEncoding = "UTF-8",encoding = "UTF-8",comment.char = "#")
tapply(d$DOCULECT,d$CONCEPT,function(X){length(unique(X))})
table(tapply(d$DOCULECT,d$CONCEPT,function(X){length(unique(X))}))
d = read.csv("../data/JML_Cognate_Coding/dhakalsouthwesttibetic 2/dhakalsouthwesttibetic.tsv",
sep="\t",fileEncoding = "UTF-8",encoding = "UTF-8",comment.char = "#")
d = d[d$NOTE!="[ignore]",]
d = d[d$NOTE!="[!] variant, can be excluded",]
# Filter concepts with no variation
conceptsWithVar = tapply(d$COGID,d$CONCEPT,
function(X){length(unique(X))>1})
d = d[d$CONCEPT %in% names(conceptsWithVar)[conceptsWithVar],]
table(tapply(d$DOCULECT,d$CONCEPT,function(X){length(unique(X))}))
setwd("~/Documents/Funding/InternationalStrategicFund/project/visualisation/")
d = read.csv("../data/langaugeLocation.csv",stringsAsFactors = F,quote="")
head(d)
d
x = fields::rdist.earth(d[,c("long","lat")])
x
x = fields::rdist.earth(d[,c("long","lat")],miles = F)
x
max(x)
which(x==max(x),arr.ind = T)
d[10,]
d[1,]
?fields::rdist.earth(d[,c("long","lat")],miles = F)
mean(x)
hist(x)
x[upper.tri(x)]
mean(x[upper.tri(x)])
d
?fields::rdist.earth(d[,c("long","lat")],miles = F)
max(x)
x = fields::rdist.earth(d[1:12,c("long","lat")],miles = F)
max(x)
d
min(x)
min(x[upper.tri(x)])
which(x==23.96857,arr.ind = T)
which(round(x)==24,arr.ind = T)
d[6:7,]
d
