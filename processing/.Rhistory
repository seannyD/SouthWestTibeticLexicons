test("  0")
test("!@#$%^&*()ABCDEFGhijklmnop1234567890")
test(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
sQuote("‘")
sQuote("‘")
sQuote("’")
?nchar
formatC(pi)
letters
grepl("^X",s)
grepl("^X",s)+1
s
x = function(s){
#sub(".",c("X","Y")[grepl("^X",s)+1],s)
sub(".",letters[grepl("^X",s)+1],s)
}
letters[1:2]
x = function(s){
#sub(".",c("X","Y")[grepl("^X",s)+1],s)
sub(".",letters[grepl("^a",s)+1],s)
}
test("X")
test("a")
test("b")
test("ab")
test("ba")
test("'")
test("'\"")
test("\\\\")
test('"')
test('""')
test('‘')
test('’')
test("XX")
test("YX")
test("~")
test("asdf")
test("1111")
test("       ")
test("~~~~~")
test("abcba")
test("1")
test(" ")
test("~")
test(" ~")
test("~ ")
test("  0")
test("!@#$%^&*()ABCDEFGhijklmnop1234567890")
test(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
x = function(s){
#sub(".",c("X","Y")[grepl("^X",s)+1],s)
sub(".",letters[grepl("^a",s)+1],s)
}
# `letters` is constant and a slightly shorter way of doing `c("a","b")`
substring(sQuote(s),2)
substring(shQuote(s),3)
x = function(s){
#substr(shQuote(s),1,nchar(s))
substr(shQuote(s),1,nchar(s))
}
test = function(t){
t2 = x(t)
t2!=t & nchar(t)==nchar(t2)
}
# Because the string might have multiple escaped characters, we need to take a substring of the correct length
# `sQuote` is shorter, but converts "‘" to "‘‘’"
test("X")
test("a")
test("b")
test("ab")
test("ba")
test("'")
test("'\"")
test("\\\\")
test('"')
test('""')
test('‘')
test('’')
test("XX")
test("YX")
test("~")
test("asdf")
test("1111")
test("       ")
test("~~~~~")
test("abcba")
test("1")
test(" ")
test("~")
test(" ~")
test("~ ")
test("  0")
test("!@#$%^&*()ABCDEFGhijklmnop1234567890")
test(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
shQuote("'")
testStrings = c("X","a","b","ab","ba",
"'","'\"","\\\\",'"','""',
'‘','’',"XX","YX","~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
sapply(testStrings,test)
testStrings = c("X","a","b","ab","ba",
"'","'\"","\\\\",'"','""',
'‘','’',"XX","YX","~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
all(sapply(testStrings,test))
rm(list=ls())
x = function(s){
substr(shQuote(s),1,nchar(s))
}
test = function(t){
t2 = x(t)
t2!=t & nchar(t)==nchar(t2)
}
testStrings = c("X","a","b","ab","ba",
"'","'\"","\\\\",'"','""',
'‘','’',"XX","YX","~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
all(sapply(testStrings,test))
testStrings = c("a","b","ab","ba","aa",
"'","'\"","\\\\",'"','""',
'‘','’',"~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
all(sapply(testStrings,test))
T+"F"
T+1
strsplit(s)
s="abcd"
letters[strsplit(s)=="a"]
letters[strsplit(s,'')=="a"]
strsplit(s,'')
letters[strsplit(s,'')[[1]]=="a"]
letters[el(strsplit(s,''))=="a"]
?readLines
?function
??function
x = function(s)substr(shQuote(s),1,nchar(s))
test = function(t){
t2 = x(t)
t2!=t & nchar(t)==nchar(t2)
}
testStrings = c("a","b","ab","ba","aa",
"'","'\"","\\\\",'"','""',
'‘','’',"~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
all(sapply(testStrings,test))
d = read.csv("~/Documents/Conferences/Evolang12/genderBias2018/data/E12.csv", stringsAsFactors = F)
head(d)
score = tapply(d$Score,d$Number,mean)
gender = tapply(d$FirstAuthGender,d$Number,mean)
library(ggplot2)
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,mean)
)
dim(d2)
head(d2)
d$Fi
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,head,n=1)
)
d = read.csv("~/Documents/Conferences/Evolang12/genderBias2018/data/E12.csv", stringsAsFactors = F)
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,head,n=1)
)
library(ggplot2)
ggplot(d2,aes(x=gender,y=score)) + geom_violin()
t.test(d2$score~d2$gender)
ggplot(d2,aes(x=gender*status,y=score)) + geom_violin()
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,head,n=1),
status = tapply(d$FirstAuthStatus,d$Number,head,n=1),
)
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,head,n=1),
status = tapply(d$FirstAuthStatus,d$Number,head,n=1)
)
ggplot(d2,aes(x=gender*status,y=score)) + geom_violin()
ggplot(d2,aes(x=gender:status,y=score)) + geom_violin()
ggplot(d2,aes(x=status,y=score)) + geom_violin()
d2$genstatus = paste(d2$gender,d2$status)
ggplot(d2,aes(x=genstatus,y=score)) + geom_violin()
summary(lm(score~gender*status,data=d2))
summary(lm(score~gender+status,data=d2))
hist(d2$score)
d2$genstatus = paste(d2$status,d2$gender)
ggplot(d2,aes(x=genstatus,y=score)) + geom_violin()
ggplot(d2,aes(x=genstatus,y=score)) + geom_violin() + geom_boxplot()
head(d)
d = read.csv("~/Documents/Conferences/Evolang12/genderBias2018/data/E12.csv", stringsAsFactors = F)
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,head,n=1),
status = tapply(d$FirstAuthStatus,d$Number,head,n=1),
SubmissionLength = tapply(d$SubmissionLength)
)
d2$genstatus = paste(d2$status,d2$gender)
library(ggplot2)
ggplot(d2,aes(x=genstatus,y=score)) + geom_violin() + geom_boxplot()
summary(lm(score~gender*status*SubmissionLength,data=d2))
d = read.csv("~/Documents/Conferences/Evolang12/genderBias2018/data/E12.csv", stringsAsFactors = F)
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,head,n=1),
status = tapply(d$FirstAuthStatus,d$Number,head,n=1),
SubmissionLength = tapply(d$SubmissionLength,d$Number,head,n=1)
)
d2$genstatus = paste(d2$status,d2$gender)
library(ggplot2)
ggplot(d2,aes(x=genstatus,y=score)) + geom_violin() + geom_boxplot()
summary(lm(score~gender*status*SubmissionLength,data=d2))
summary(lm(score~gender*SubmissionLength,data=d2))
summary(lm(score~gender*status,data=d2))
library(rjson)
library(stringdist)
try(setwd("~/Documents/Funding/InternationalStrategicFund/project/processing/"))
readTSV = function(f){
read.table(f,quote = "",stringsAsFactors = F, encoding = 'utf-8',fileEncoding = 'utf-8',sep="\t", header = T)
}
concepticon = fromJSON(file ="../data/reference/concepticon_conceptset.json/conceptset.json")
tsum = readTSV("../data/processed/Tsum.tsv")
#tsum = readTSV("../data/processed/Tsum_tmp.tsv")
#tsum = tsum[!duplicated(tsum$ID),]
#tsum$CONCEPT = tsum$CONCEPTICON_GLOSS
nubri = readTSV("../data/processed/Nubri.tsv")
gyalsumdo = readTSV("../data/processed/Gyalsumdo.tsv")
jirel = readTSV("../data/processed/Jirel.tsv")
lowa = readTSV("../data/processed/Lowa.tsv")
yolmo = readTSV("../data/processed/Yolmo.tsv")
dim(yolmo)
length(unique(yolmo$CONCEPT))
sum(unique(yolmo$CONCEPT) %in% swadesh100$Parameter)
swadesh100 = read.csv("../data/reference/Swadesh1964_100.csv",stringsAsFactors = F, encoding = "utf-8",fileEncoding = 'utf-8')
dunn207 = read.csv("../data/reference/Dun_2012_207.tab", stringsAsFactors = F, encoding = 'utf-8', fileEncoding = "utf-8", sep="\t",quote="")
sum(unique(yolmo$CONCEPT) %in% swadesh100$Parameter)
jirelConcepts = unique(jirel$CONCEPT)
sum(!jirelConcepts %in% unique(yolmo$CONCEPT))
overlapConcepts = allConcepts[allConcepts %in% tsum$CONCEPT & allConcepts %in% nubri$CONCEPT & allConcepts %in% gyalsumdo$CONCEPT & allConcepts %in% lowa$CONCEPT & allConcepts %in% yolmo$CONCEPT]
library(rjson)
library(stringdist)
try(setwd("~/Documents/Funding/InternationalStrategicFund/project/processing/"))
readTSV = function(f){
read.table(f,quote = "",stringsAsFactors = F, encoding = 'utf-8',fileEncoding = 'utf-8',sep="\t", header = T)
}
concepticon = fromJSON(file ="../data/reference/concepticon_conceptset.json/conceptset.json")
tsum = readTSV("../data/processed/Tsum.tsv")
#tsum = readTSV("../data/processed/Tsum_tmp.tsv")
#tsum = tsum[!duplicated(tsum$ID),]
#tsum$CONCEPT = tsum$CONCEPTICON_GLOSS
nubri = readTSV("../data/processed/Nubri.tsv")
gyalsumdo = readTSV("../data/processed/Gyalsumdo.tsv")
jirel = readTSV("../data/processed/Jirel.tsv")
lowa = readTSV("../data/processed/Lowa.tsv")
yolmo = readTSV("../data/processed/Yolmo.tsv")
swadesh100 = read.csv("../data/reference/Swadesh1964_100.csv",stringsAsFactors = F, encoding = "utf-8",fileEncoding = 'utf-8')
dunn207 = read.csv("../data/reference/Dun_2012_207.tab", stringsAsFactors = F, encoding = 'utf-8', fileEncoding = "utf-8", sep="\t",quote="")
length(unique(tsum$CONCEPT))
length(unique(nubri$CONCEPT))
length(unique(gyalsumdo$CONCEPT))
length(unique(jirel$CONCEPT))
length(unique(lowa$CONCEPT))
length(unique(yolmo$CONCEPT))
sum(unique(tsum$CONCEPT) %in% swadesh100$Parameter)
sum(unique(nubri$CONCEPT) %in% swadesh100$Parameter)
sum(unique(gyalsumdo$CONCEPT) %in% swadesh100$Parameter)
sum(unique(jirel$CONCEPT) %in% swadesh100$Parameter)
sum(unique(lowa$CONCEPT) %in% swadesh100$Parameter)
sum(unique(yolmo$CONCEPT) %in% swadesh100$Parameter)
jirelConcepts = unique(jirel$CONCEPT)
sum(!jirelConcepts %in% unique(tsum$CONCEPT))
sum(!jirelConcepts %in% unique(nubri$CONCEPT))
sum(!jirelConcepts %in% unique(gyalsumdo$CONCEPT))
sum(!jirelConcepts %in% unique(lowa$CONCEPT))
sum(!jirelConcepts %in% unique(yolmo$CONCEPT))
findMissingConcepts = function(d){
missing = data.frame(
DOCULECT = d$DOCULECT[1],
CONCEPT = jirelConcepts[!jirelConcepts %in% d$CONCEPT])
missing$CONCEPTID = sapply(concepticon$conceptset_labels[missing$CONCEPT],head,n=1)
return(missing)
}
missing = rbind(findMissingConcepts(tsum),
findMissingConcepts(nubri),
findMissingConcepts(gyalsumdo),
#findMissingConcepts(jirel),
findMissingConcepts(lowa),
findMissingConcepts(yolmo))
write.csv(missing,file="../data/processed/MissingConcepts.csv", fileEncoding = 'utf-8')
allConcepts = unique(c(tsum$CONCEPT,nubri$CONCEPT,gyalsumdo$CONCEPT))
allConcepts = allConcepts[allConcepts!=""]
overlapConcepts = allConcepts[allConcepts %in% tsum$CONCEPT & allConcepts %in% nubri$CONCEPT & allConcepts %in% gyalsumdo$CONCEPT & allConcepts %in% lowa$CONCEPT & allConcepts %in% yolmo$CONCEPT]
length(overlapConcepts)
library(rjson)
library(stringdist)
try(setwd("~/Documents/Funding/InternationalStrategicFund/project/processing/"))
readTSV = function(f){
read.table(f,quote = "",stringsAsFactors = F, encoding = 'utf-8',fileEncoding = 'utf-8',sep="\t", header = T)
}
concepticon = fromJSON(file ="../data/reference/concepticon_conceptset.json/conceptset.json")
tsum = readTSV("../data/processed/Tsum.tsv")
#tsum = readTSV("../data/processed/Tsum_tmp.tsv")
#tsum = tsum[!duplicated(tsum$ID),]
#tsum$CONCEPT = tsum$CONCEPTICON_GLOSS
nubri = readTSV("../data/processed/Nubri.tsv")
gyalsumdo = readTSV("../data/processed/Gyalsumdo.tsv")
jirel = readTSV("../data/processed/Jirel.tsv")
lowa = readTSV("../data/processed/Lowa.tsv")
yolmo = readTSV("../data/processed/Yolmo.tsv")
swadesh100 = read.csv("../data/reference/Swadesh1964_100.csv",stringsAsFactors = F, encoding = "utf-8",fileEncoding = 'utf-8')
dunn207 = read.csv("../data/reference/Dun_2012_207.tab", stringsAsFactors = F, encoding = 'utf-8', fileEncoding = "utf-8", sep="\t",quote="")
length(unique(tsum$CONCEPT))
length(unique(nubri$CONCEPT))
length(unique(gyalsumdo$CONCEPT))
length(unique(jirel$CONCEPT))
length(unique(lowa$CONCEPT))
length(unique(yolmo$CONCEPT))
sum(unique(tsum$CONCEPT) %in% swadesh100$Parameter)
sum(unique(nubri$CONCEPT) %in% swadesh100$Parameter)
sum(unique(gyalsumdo$CONCEPT) %in% swadesh100$Parameter)
sum(unique(jirel$CONCEPT) %in% swadesh100$Parameter)
sum(unique(lowa$CONCEPT) %in% swadesh100$Parameter)
sum(unique(yolmo$CONCEPT) %in% swadesh100$Parameter)
jirelConcepts = unique(jirel$CONCEPT)
sum(!jirelConcepts %in% unique(tsum$CONCEPT))
sum(!jirelConcepts %in% unique(nubri$CONCEPT))
sum(!jirelConcepts %in% unique(gyalsumdo$CONCEPT))
sum(!jirelConcepts %in% unique(lowa$CONCEPT))
sum(!jirelConcepts %in% unique(yolmo$CONCEPT))
findMissingConcepts = function(d){
missing = data.frame(
DOCULECT = d$DOCULECT[1],
CONCEPT = jirelConcepts[!jirelConcepts %in% d$CONCEPT])
missing$CONCEPTID = sapply(concepticon$conceptset_labels[missing$CONCEPT],head,n=1)
return(missing)
}
missing = rbind(findMissingConcepts(tsum),
findMissingConcepts(nubri),
findMissingConcepts(gyalsumdo),
#findMissingConcepts(jirel),
findMissingConcepts(lowa),
findMissingConcepts(yolmo))
write.csv(missing,file="../data/processed/MissingConcepts.csv", fileEncoding = 'utf-8')
allConcepts = unique(c(tsum$CONCEPT,nubri$CONCEPT,gyalsumdo$CONCEPT))
allConcepts = allConcepts[allConcepts!=""]
overlapConcepts = allConcepts[allConcepts %in% tsum$CONCEPT & allConcepts %in% nubri$CONCEPT & allConcepts %in% gyalsumdo$CONCEPT & allConcepts %in% lowa$CONCEPT & allConcepts %in% yolmo$CONCEPT]
getOverlap = function(d){
d = d[d$CONCEPT %in% overlapConcepts,]
d = d[!duplicated(d$CONCEPT),]
return(d[order(d$CONCEPT),]$TRANSCRIPTION)
}
compareIPA = function(l1,l2){
dists = sapply(1:length(l1),function(i){
stringdist(l1[i],l2[i],method = 'lv')/
max(nchar(l1[i]),nchar(l2[i]))
})
mean(dists,na.rm=T)
}
overlapIPA =
list(getOverlap(tsum),
getOverlap(nubri),
getOverlap(gyalsumdo),
getOverlap(jirel),
getOverlap(lowa))
names(overlapIPA) = c("tsum",'nubri','gyalsumdo','jirel','lowa')
dists = matrix(0,nrow = length(overlapIPA),ncol = length(overlapIPA))
rownames(dists) = names(overlapIPA)
colnames(dists) = names(overlapIPA)
for(i in 1:length(overlapIPA)){
for(j in i:length(overlapIPA)){
dx = compareIPA(overlapIPA[[i]],overlapIPA[[j]])
dists[names(overlapIPA)[i],names(overlapIPA)[j]] = dx
dists[names(overlapIPA)[j],names(overlapIPA)[i]] = dx
}
}
makeSplitstree = function(dists, filename){
header = paste("#nexus\n\nBEGIN Taxa;\nDIMENSIONS ntax=",nrow(dists),";\nTAXLABELS\n",collapse="")
taxlabels= paste(paste("[",1:nrow(dists),"] '",rownames(dists),"'",sep=''),collapse='\n')
header2 = paste("\n;\nEND;  [TAXA]\n\nBEGIN DISTANCES;\n        DIMENSIONS NTAX=" , nrow(dists),";  FORMAT  TRIANGLE=BOTH DIAGONAL LABELS=LEFT;\nMATRIX\n", collapse='')
rnames = paste("'",rownames(dists),"'",sep='')
mat = paste(paste(rnames,apply(dists,1,paste,collapse=' ')),collapse='\n')
header3 = "\n;\nEND;\n"
nexus = paste(header, taxlabels, header2, mat, header3, collapse='')
cat(nexus,file = filename)
}
makeSplitstree(dists,"../results/distances/distances.nex")
library(rjson)
library(stringdist)
try(setwd("~/Documents/Funding/InternationalStrategicFund/project/processing/"))
readTSV = function(f){
read.table(f,quote = "",stringsAsFactors = F, encoding = 'utf-8',fileEncoding = 'utf-8',sep="\t", header = T)
}
concepticon = fromJSON(file ="../data/reference/concepticon_conceptset.json/conceptset.json")
tsum = readTSV("../data/processed/Tsum.tsv")
#tsum = readTSV("../data/processed/Tsum_tmp.tsv")
#tsum = tsum[!duplicated(tsum$ID),]
#tsum$CONCEPT = tsum$CONCEPTICON_GLOSS
nubri = readTSV("../data/processed/Nubri.tsv")
gyalsumdo = readTSV("../data/processed/Gyalsumdo.tsv")
jirel = readTSV("../data/processed/Jirel.tsv")
lowa = readTSV("../data/processed/Lowa.tsv")
yolmo = readTSV("../data/processed/Yolmo.tsv")
swadesh100 = read.csv("../data/reference/Swadesh1964_100.csv",stringsAsFactors = F, encoding = "utf-8",fileEncoding = 'utf-8')
dunn207 = read.csv("../data/reference/Dun_2012_207.tab", stringsAsFactors = F, encoding = 'utf-8', fileEncoding = "utf-8", sep="\t",quote="")
length(unique(tsum$CONCEPT))
length(unique(nubri$CONCEPT))
length(unique(gyalsumdo$CONCEPT))
length(unique(jirel$CONCEPT))
length(unique(lowa$CONCEPT))
length(unique(yolmo$CONCEPT))
sum(unique(tsum$CONCEPT) %in% swadesh100$Parameter)
sum(unique(nubri$CONCEPT) %in% swadesh100$Parameter)
sum(unique(gyalsumdo$CONCEPT) %in% swadesh100$Parameter)
sum(unique(jirel$CONCEPT) %in% swadesh100$Parameter)
sum(unique(lowa$CONCEPT) %in% swadesh100$Parameter)
sum(unique(yolmo$CONCEPT) %in% swadesh100$Parameter)
jirelConcepts = unique(jirel$CONCEPT)
sum(!jirelConcepts %in% unique(tsum$CONCEPT))
sum(!jirelConcepts %in% unique(nubri$CONCEPT))
sum(!jirelConcepts %in% unique(gyalsumdo$CONCEPT))
sum(!jirelConcepts %in% unique(lowa$CONCEPT))
sum(!jirelConcepts %in% unique(yolmo$CONCEPT))
findMissingConcepts = function(d){
missing = data.frame(
DOCULECT = d$DOCULECT[1],
CONCEPT = jirelConcepts[!jirelConcepts %in% d$CONCEPT])
missing$CONCEPTID = sapply(concepticon$conceptset_labels[missing$CONCEPT],head,n=1)
return(missing)
}
missing = rbind(findMissingConcepts(tsum),
findMissingConcepts(nubri),
findMissingConcepts(gyalsumdo),
#findMissingConcepts(jirel),
findMissingConcepts(lowa),
findMissingConcepts(yolmo))
write.csv(missing,file="../data/processed/MissingConcepts.csv", fileEncoding = 'utf-8')
allConcepts = unique(c(tsum$CONCEPT,nubri$CONCEPT,gyalsumdo$CONCEPT))
allConcepts = allConcepts[allConcepts!=""]
overlapConcepts = allConcepts[allConcepts %in% tsum$CONCEPT & allConcepts %in% nubri$CONCEPT & allConcepts %in% gyalsumdo$CONCEPT & allConcepts %in% lowa$CONCEPT & allConcepts %in% yolmo$CONCEPT]
getOverlap = function(d){
d = d[d$CONCEPT %in% overlapConcepts,]
d = d[!duplicated(d$CONCEPT),]
return(d[order(d$CONCEPT),]$TRANSCRIPTION)
}
compareIPA = function(l1,l2){
dists = sapply(1:length(l1),function(i){
stringdist(l1[i],l2[i],method = 'lv')/
max(nchar(l1[i]),nchar(l2[i]))
})
mean(dists,na.rm=T)
}
overlapIPA =
list(getOverlap(tsum),
getOverlap(nubri),
getOverlap(gyalsumdo),
getOverlap(jirel),
getOverlap(lowa),
getOverlap(yolmo))
names(overlapIPA) = c("tsum",'nubri','gyalsumdo','jirel','lowa','yolmo')
dists = matrix(0,nrow = length(overlapIPA),ncol = length(overlapIPA))
rownames(dists) = names(overlapIPA)
colnames(dists) = names(overlapIPA)
for(i in 1:length(overlapIPA)){
for(j in i:length(overlapIPA)){
dx = compareIPA(overlapIPA[[i]],overlapIPA[[j]])
dists[names(overlapIPA)[i],names(overlapIPA)[j]] = dx
dists[names(overlapIPA)[j],names(overlapIPA)[i]] = dx
}
}
makeSplitstree = function(dists, filename){
header = paste("#nexus\n\nBEGIN Taxa;\nDIMENSIONS ntax=",nrow(dists),";\nTAXLABELS\n",collapse="")
taxlabels= paste(paste("[",1:nrow(dists),"] '",rownames(dists),"'",sep=''),collapse='\n')
header2 = paste("\n;\nEND;  [TAXA]\n\nBEGIN DISTANCES;\n        DIMENSIONS NTAX=" , nrow(dists),";  FORMAT  TRIANGLE=BOTH DIAGONAL LABELS=LEFT;\nMATRIX\n", collapse='')
rnames = paste("'",rownames(dists),"'",sep='')
mat = paste(paste(rnames,apply(dists,1,paste,collapse=' ')),collapse='\n')
header3 = "\n;\nEND;\n"
nexus = paste(header, taxlabels, header2, mat, header3, collapse='')
cat(nexus,file = filename)
}
makeSplitstree(dists,"../results/distances/distances.nex")
length(unique(tsum$CONCEPT))
length(unique(nubri$CONCEPT))
length(unique(gyalsumdo$CONCEPT))
length(unique(jirel$CONCEPT))
length(unique(lowa$CONCEPT))
length(unique(yolmo$CONCEPT))
sum(jirelConcepts %in% unique(yolmo$CONCEPT))
sum(jirelConcepts %in% unique(tsum$CONCEPT))
sum(jirelConcepts %in% unique(nubri$CONCEPT))
sum(jirelConcepts %in% unique(gyalsumdo$CONCEPT))
sum(jirelConcepts %in% unique(lowa$CONCEPT))
sum(jirelConcepts %in% unique(yolmo$CONCEPT))
dim(missing)
5 * 207
391/1035
