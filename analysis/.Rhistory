# Add to results
rowNum = which(PATRange$numNodes==numNodes)
# Mean
PATRange[rowNum,]$averagePathLength.mean =
mean(PAT_large.averagePathLength)
# Confidence intervals around the mean (quite small)
PATRange[rowNum,c("lowerCI","upperCI")] =
getConfidenceIntervals(PAT_large.averagePathLength)
# 95% quantiles
PATRange[rowNum,c("lowerQuantile","upperQuantile")] =
quantile(PAT_large.averagePathLength,probs = c(0.025,0.975))
}
library(ggplot2)
# Plot the 95% quantiles
ggplot(PATRange,aes(x=numNodes,y=averagePathLength.mean)) +
geom_line() +
geom_ribbon(aes(ymax=upperQuantile,ymin=lowerQuantile),alpha=0.1) +
ggtitle("PAT")
PAT = makeGraph(10, degree)
head(PAT)
makeGraph = function(numOfNodes,evaluateNodeFunction){
# Make a matrix to hold the results,
# one column for each size of the network as it grows
# one row for average degree
# one row for average path length
results = matrix(nrow = 2,ncol=numOfNodes)
rownames(results) = c("AverageDegree","AveragePathLength")
g = graph_from_literal(1-2)
for(i in 3:numOfNodes){
# evaluate nodes
nodeScores = evaluateNodeFunction(g)
# choose node according to scores
# (being a bit paranoid and returning the name of the node,
# not just the node number)
nodeToAttachTo = sample(names(nodeScores),1,prob=nodeScores)
# Add the node
g = add_vertices(g, 1,name=i)
# add an edge
g = add_edges(g,c(i,nodeToAttachTo))
plot(g)
# add some stats to the results
results["AverageDegree",i] = mean(degree(g))
results["AveragePathLength",i] = average.path.length(g)
}
return(results)
}
makeGraph = function(numOfNodes,evaluateNodeFunction){
# Make a matrix to hold the results,
# one column for each size of the network as it grows
# one row for average degree
# one row for average path length
results = matrix(nrow = 2,ncol=numOfNodes)
rownames(results) = c("AverageDegree","AveragePathLength")
g = graph_from_literal(1-2)
for(i in 3:numOfNodes){
# evaluate nodes
nodeScores = evaluateNodeFunction(g)
# choose node according to scores
# (being a bit paranoid and returning the name of the node,
# not just the node number)
nodeToAttachTo = sample(names(nodeScores),1,prob=nodeScores)
# Add the node
g = add_vertices(g, 1,name=i)
# add an edge
g = add_edges(g,c(i,nodeToAttachTo))
plot(g)
# add some stats to the results
results["AverageDegree",i] = mean(degree(g))
results["AveragePathLength",i] = average.path.length(g)
}
return(results)
}
########################
# Make individual graphs
PAT = makeGraph(10, degree)
d = read.csv("~/Downloads/SWOW-EN.R100.csv",stringsAsFactors = F)
head(d)
d = read.csv("~/Downloads/responseStats.SWOW-EN.csv",stringsAsFactors = F)
head(d)
d = read.csv("~/Downloads/cueStats.SWOW-EN.R123.csv",stringsAsFactors = F)
head(d)
d = read.csv("~/Downloads/strength.SWOW-EN.R1.csv",stringsAsFactors = F)
head(d)
d = read.csv("~/Downloads/strength.SWOW-EN.R1.csv",stringsAsFactors = F,sep="\t")
head(d[d$cue=="map",])
out += 1
TTurn = function(){
if ((sample(1:20,1)+5)>=13){
return(sample(1:8,1)+5)
}
else(return(0))
}
GTurn = function(){
out = 0
if((sample(1:20,1)+8)>=17){
out = out + 9
}
if((sample(1:20,1)+8)>=17){
out = out + 9
}
return(out)
}
turn = function(){
THP = 45
GHP = 105
while(T){
GHP = GHP - TTurn()
if(GHP<=0) break
THP = THP - GTurn()
if(THP<=0) break
}
if(THP>0){
return("Taran")
} else{
return("Giant")
}
}
replicate(10,turn())
TTurn = function(){
if ((sample(1:20,1)+5)>=13){
return(sample(1:8,1)+5)
}
else(return(0))
}
GTurn = function(){
out = 0
if((sample(1:20,1)+8)>=17){
out = out + 9
}
if((sample(1:20,1)+8)>=17){
out = out + 9
}
return(out)
}
turn = function(){
THP = 45
GHP = 105
while(T){
GHP = GHP - TTurn()
if(GHP<=0) break
THP = THP - GTurn()
if(THP<=0) break
}
if(THP>0){
return(c("Taran",THP))
} else{
return(c("Giant",GHP))
}
}
replicate(10,turn())
TTurn = function(){
if ((sample(1:20,1)+5)>=13){
return(sample(1:8,1)+5)
}
else(return(0))
}
GTurn = function(){
out = 0
if((sample(1:20,1)+8)>=17){
out = out + 9
}
if((sample(1:20,1)+8)>=17){
out = out + 9
}
return(out)
}
turn = function(){
THP = 90
GHP = 105
while(T){
GHP = GHP - TTurn()
if(GHP<=0) break
THP = THP - GTurn()
if(THP<=0) break
}
if(THP>0){
return(c("Taran",THP))
} else{
return(c("Giant",GHP))
}
}
replicate(10,turn())
replicate(TTurn())
replicate(10,TTurn())
replicate(10,GTurn())
TTurn = function(){
if ((sample(1:20,1)+5)>=13){
return(sample(1:8,1)+5)
}
else(return(0))
}
GTurn = function(){
out = 0
if((sample(1:20,1)+8)>=17){
out = out + 9
}
if((sample(1:20,1)+8)>=17){
out = out + 9
}
return(out)
}
turn = function(){
THP = 90
GHP = 105
while(T){
GHP = GHP - TTurn()
if(GHP<=0) break
THP = THP - GTurn()
if(THP<=0) break
}
if(THP>0){
return(c("Taran",THP))
} else{
return(c("Giant",GHP))
}
}
table(replicate(200,turn()))
TTurn = function(){
if ((sample(1:20,1)+5)>=13){
return(sample(1:8,1)+5)
}
else(return(0))
}
GTurn = function(){
out = 0
if((sample(1:20,1)+8)>=17){
out = out + 9
}
if((sample(1:20,1)+8)>=17){
out = out + 9
}
return(out)
}
turn = function(){
THP = 90
GHP = 105
while(T){
GHP = GHP - TTurn()
if(GHP<=0) break
THP = THP - GTurn()
if(THP<=0) break
}
if(THP>0){
return(c("Taran",THP))
} else{
return(c("Giant",GHP))
}
}
res = replicate(200,turn())
res
table(res[1,])
TTurn = function(){
if ((sample(1:20,1)+5)>=13){
return(sample(1:8,1)+5)
}
else(return(0))
}
GTurn = function(){
out = 0
if((sample(1:20,1)+8)>=17){
out = out + 9
}
#if((sample(1:20,1)+8)>=17){
#  out = out + 9
#}
return(out)
}
turn = function(){
THP = 90
GHP = 105
while(T){
GHP = GHP - TTurn()
if(GHP<=0) break
THP = THP - GTurn()
if(THP<=0) break
}
if(THP>0){
return(c("Taran",THP))
} else{
return(c("Giant",GHP))
}
}
res = replicate(200,turn())
table(res[1,])
TTurn = function(){
if ((sample(1:20,1)+5)>=13){
return(sample(1:8,1)+5)
}
else(return(0))
}
GTurn = function(){
out = 0
if((sample(1:20,1)+8)>=17){
out = out + 9
}
if((sample(1:20,1)+8)>=17){
out = out + 9
}
return(out)
}
turn = function(){
THP = 90
GHP = 50
while(T){
GHP = GHP - TTurn()
if(GHP<=0) break
THP = THP - GTurn()
if(THP<=0) break
}
if(THP>0){
return(c("Taran",THP))
} else{
return(c("Giant",GHP))
}
}
res = replicate(200,turn())
table(res[1,])
TTurn = function(){
if ((sample(1:20,1)+5)>=13){
return(sample(1:8,1)+5)
}
else(return(0))
}
GTurn = function(){
out = 0
if((sample(1:20,1)+8)>=17){
out = out + 9
}
if((sample(1:20,1)+8)>=17){
out = out + 9
}
return(out)
}
turn = function(){
THP = 90
GHP = 105
while(T){
GHP = GHP - TTurn()
if(GHP<=0) break
THP = THP - GTurn()
if(THP<=0) break
}
if(THP>0){
return(c("Taran",THP))
} else{
return(c("Giant",GHP))
}
}
res = replicate(200,turn())
table(res[1,])
hist(res[2,])
res[2,]
hist(as.numeric(res[2,]))
table(res[1,])
replicate(6,sample(1:9,1))
replicate(6,sample(1:9,1))
sample(sample(1:9,6))
sample(sample(1:9,10))
sample(sample(c(1:9,1:9),10))
sample(sample(c(1:9,1:9),10))
sample(sample(c(1:9,1:9),10))
x = sample(sample(c(1:9,1:9),10))
min(diff(x))
diff(x)
x
min(abs(diff(x)))
x = 1:2
while(min(abs(diff(x)))<=1){
x = sample(sample(c(1:9,1:9),10))
}
x
x = 1:2
while(min(abs(diff(x)))<=1){
x = sample(sample(c(1:9,1:9),10))
}
x
x = 1:2
while(min(abs(diff(x)))<=1){
x = sample(sample(c(1:9,1:9),10))
}
x
x = 1:2
while(min(abs(diff(x)))<=1){
x = sample(sample(c(1:9,1:9),11))
}
x
x = 1:2
while(min(abs(diff(x)))<=1){
x = sample(sample(c(1:9,1:9),11))
}
x
sample(x,4)
x = c( "sum", "hate", "harm", "wit", "bond",
"yield", "worst", "twice")
sample(x,4)
sample(x,4)
replicate(3,sample(x,4))
replicate(3,sample(x,5))
t(replicate(3,sample(x,5)))
t(replicate(3,sample(x,4)))
t(replicate(3,sample(x,4)))
x = c("association", "opportunity", "representative", "organization", "considerable", "immediately", "university", "individual")
x = c( "sum", "hate", "harm", "wit", "bond",
"yield", "worst", "twice")
t(replicate(3,sample(x,4)))
x = c( "sum", "hate", "harm", "wit", "bond",
"yield", "worst", "twice")
t(replicate(3,sample(x,4)))
x = c( "sum", "hate", "harm", "wit", "bond",
"yield", "worst", "twice")
t(replicate(3,sample(x,4)))
t(replicate(3,sample(x,5)))
t(replicate(3,sample(x,6)))
t(replicate(3,sample(x,7)))
t(replicate(3,sample(x,7)))
x = c("association", "opportunity", "representative", "organization", "considerable", "immediately", "university", "individual")
t(replicate(3,sample(x,4)))
t(replicate(3,sample(x,5)))
t(replicate(2,sample(x,6)))
t(replicate(2,sample(x,7)))
t(replicate(2,sample(x,7)))
t(replicate(2,sample(x,7)))
t(replicate(2,sample(x,7)))
t(replicate(2,sample(x,6)))
sample(0:31,1)==0
g = function(){
if(sample(0:31,1)==0){return("m")}
return(sample(c("m","f"),1))
}
table(replicate(1000,g()))
prop.table(table(replicate(1000,g())))
prop.table(table(replicate(10000,g())))
(1/31) + ((30/31)*0.5)
prop.table(table(replicate(100000,g())))
kk = c(49,75,62,44,82,68,58,68,82,60,66,49,49,54,69,52,51,49,54,49,69,64,65)
eb = c(61,69,68,55,70,67,51,56,68,64,40,64,74,68,61,60,66,40,38,58,59,67,65,60,40,63,13)
hist(kk)
hist(eb)
mean(kk)
mean(eb)
sort(kk)
mean(eb[eb>14])
sd(kk)
sd(eb[eb>14])
abline(h = 0, col = 'green')
View(d)
d = data.frame()
View(d)
BSA2018.final.datatables <- read.table("~/Downloads/BSA2018 final datatables.xlsx", header=TRUE, quote="\"")
View(BSA2018.final.datatables)
?mean
?sum
?nchar
nchar("Seán")
nchar("Seán", type="char")
nchar("Seán", type="bytes")
?mean
log(100)
log10(100)
?log
e
1.2e-4
10^3
1.2e3
setwd("~/Documents/Funding/InternationalStrategicFund/project/analysis/")
local = read.delim("../data/corrected/AllLangs_240_CogID_Sagart_Complete_Extended_Checked4.tsv",sep="\t",quote="",fileEncoding = "UTF-8",encoding = 'UTF-8')
server = read.delim("~/Downloads/tibetan_Server.txt",sep="\t",quote="",fileEncoding = "UTF-8",encoding = 'UTF-8')
head(server)
head(local)
sum(server$ALIGNMENT==local$ALIGNMENT)
server = read.delim("~/Downloads/tibetan_Server.txt",sep="\t",quote="",fileEncoding = "UTF-8",encoding = 'UTF-8', stringsAsFactors = F)
local = read.delim("../data/corrected/AllLangs_240_CogID_Sagart_Complete_Extended_Checked4.tsv",sep="\t",quote="",fileEncoding = "UTF-8",encoding = 'UTF-8',stringsAsFactors = F)
server = read.delim("~/Downloads/tibetan_Server.txt",sep="\t",quote="",fileEncoding = "UTF-8",encoding = 'UTF-8', stringsAsFactors = F)
sum(server$ALIGNMENT==local$ALIGNMENT)
dim(server)
dim(local)
sum(server$ID==local$ID.1)
sum(server$ID==local$ID)
local[local$ID!=server$ID,]
sum(is.na(local$ID.1))
sum(is.na(local$ID))
head(local[local$ID!=server$ID,])
head(local[!local$ID %in% server$ID,])
setwd("~/Documents/Funding/InternationalStrategicFund/project/analysis/")
local = read.delim("../data/corrected/AllLangs_240_CogID_Sagart_Complete_Extended_Checked4.tsv",sep="\t",quote="",fileEncoding = "UTF-8",encoding = 'UTF-8',stringsAsFactors = F,comment.char = "#")
server = read.delim("~/Downloads/tibetan_Server.txt",sep="\t",quote="",fileEncoding = "UTF-8",encoding = 'UTF-8', stringsAsFactors = F,comment.char = "#")
sum(server$ALIGNMENT==local$ALIGNMENT)
dim(server)
dim(local)
tail(local)
tail(server)
sum(server$ALIGNMENT==local$ALIGNMENT)
dim(local)
server[server$ID!=local$ID,]
16689 %in% server$ID
sum(local$ID %in% server$ID)
dim(local)
server = server[match(local$ID,server$ID),]
dim(server)
dim(local)
sum(server$ID==local$ID.1)
sum(server$ID==local$ID)
dim(server)
sum(server$ALIGNMENT==local$ALIGNMENT)
sel = server$ALIGNMENT!=local$ALIGNMENT
local[sel,]
local[local$ID==7913,]$ALIGNMENT
server[server$ID==7913,]$ALIGNMENT
x = server[server$ID==7913,]$ALIGNMENT
y = local[local$ID==7913,]$ALIGNMENT
x==y
adist(x,y)
